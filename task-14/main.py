import sys
import time
import curses
from random import randint, choice

"""
Python„ÇíÁî®„ÅÑ„Å¶„ÅÆÂÆüË£Ö„ÇíË°å„ÅÑ„ÄÅ‰ª•‰∏ã„ÅÆÂïè„Å´ÂØæ„Åó„Å¶ÂõûÁ≠î„Åõ„Çà„ÄÇ

ÊèêÂá∫ÂÜÖÂÆπ„ÅØË™≤È°å„Å´ÂØæ„Åó„Å¶‰ΩúÊàê„Åó„Åü„Éó„É≠„Ç∞„É©„É†„Éá„Éº„ÇøÂèä„Å≥„ÄÅ„Åù„ÅÆ„Éó„É≠„Ç∞„É©„É†„ÅÆÂá∫Âäõ„Å®„Åô„Çã„ÄÇjupiterÁ≠â„Åß„Éó„É≠„Ç∞„É©„É†„Å®Âá∫Âäõ„ÅåÂêå„Éï„Ç°„Ç§„É´„Å´„Å™„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„Å®„ÇÅ„Å¶„Åó„Åæ„Å£„Å¶ÂïèÈ°å„Å™„ÅÑ„ÄÇ

„Åì„Çå„Åæ„ÅßÂ≠¶Áøí„Åó„Åü„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÊåáÂêë„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇÑ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÅÆÂøúÁî®„Å®„Åó„Å¶„ÄÅ‰∏ãË®ò„Å´Èñ¢„Åô„Çã„Éó„É≠„Ç∞„É©„É†„ÇíÂÆüË£Ö„Åô„Çã„ÄÇ

Á©¥Êéò„ÇäÊ≥ï„ÇíÁî®„ÅÑ„ÅüËø∑Ë∑ØÁîüÊàê„Éó„É≠„Ç∞„É©„É†

‰ªäÂõûÊâ±„ÅÜ„ÉÜ„Éº„Éû„ÅØ‰∏ãË®ò„Å®„Å™„Çã„ÄÇ

    „ÇØ„É©„Çπ„ÇÑ„É°„ÇΩ„ÉÉ„ÉâÂá¶ÁêÜ
    Â§öÊ¨°ÂÖÉÈÖçÂàóÔºà„É™„Çπ„ÉàÔºâ„ÅÆÂèñ„ÇäÊâ±„ÅÑ
    for„ÇÑwhile„Å™„Å©„ÅÆÂêÑÁ®ÆÁπ∞„ÇäËøî„ÅóÂá¶ÁêÜ
    Ë§áÈõë„Å™Êù°‰ª∂ÂàÜÂ≤ê
    ÂÜçÂ∏∞Âá¶ÁêÜ


„Äê‰∏ãË®ò„Å´Ë®òËºâ„ÅÆ„Éó„É≠„Ç∞„É©„É†„ÇíPython„ÇíÁî®„ÅÑ„Å¶ÂÆüË£Ö„Åô„Çã„Äë

Á©¥Êéò„ÇäÊ≥ï„ÅØ„ÄÅÂÖ®Èù¢Â£Å„Å®ÂÆöÁæ©„Åó„Åü‰ΩúÊ•≠È†òÂüü‰∏≠„Å´Á©¥„Çí‰º∏„Å∞„Åó„Å¶ÈÅì„Å®„Åó„Å¶„ÅÑ„Åè„Åì„Å®„Å´„Çà„Å£„Å¶Ëø∑Ë∑Ø„Çí‰ΩúÊàê„Åô„Çã„Éó„É≠„Ç∞„É©„É†„Åß„ÅÇ„Çã„ÄÇ„Ç≤„Éº„É†„ÅÆ„ÉÄ„É≥„Ç∏„Éß„É≥„ÅÆËá™ÂãïÁîüÊàê„Å™„Å©„ÅßÂà©Áî®„Åï„Çå„ÇãÊâãÊ≥ï„ÅÆ„ÅÜ„Å°„ÅÆÂè§ÂÖ∏ÁöÑ„ÄÅÂü∫Êú¨ÁöÑ„Å™ÊâãÊ≥ï„ÅÆ„Å≤„Å®„Å§„Åß„ÅÇ„Çã„ÄÇ

‰∏ãË®ò„ÅåÁ©¥Êéò„ÇäÊ≥ï„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„Å®„Å™„Çã„ÄÇ

    Á∏¶Ê®™„Åù„Çå„Åû„Çå5„Éû„Çπ‰ª•‰∏ä„ÅÆ„Éû„ÉÉ„Éó„Çí‰ΩúÊàê„Åô„Çã
    ‰ΩúÊàê„Åó„Åü„Éû„ÉÉ„Éó„Çí„Åô„Åπ„Å¶Â£Å„Å®„Åô„Çã
    „Éû„ÉÉ„Éó‰∏ä„ÅÆx,yÂ∫ßÊ®ô„Åã„Çâ‰ªªÊÑè„ÅÆ‰ΩçÁΩÆ„ÇíÈÅ∏Êäû„Åó„Å¶„ÄÅ„Åù„Åì„Åã„ÇâÊéò„ÇäÈÄ≤„ÇÅ„Çã„ÄÇÊéò„ÇäÈÄ≤„ÇÅ„ÇãÊñπÊ≥ï„ÅØ‰∏ãË®ò„Å®„Å™„Çã


    ‰∏ä‰∏ãÂ∑¶Âè≥„ÅÆÊñπÂêë„Åß„ÄÅ„Å©„ÅÆÊñπÂêë„ÅåÊéò„ÇäÈÄ≤„ÇÅ„Çâ„Çå„Çã„ÅÆ„ÅãÂà§ÂÆö„Åô„Çã„ÄÇÊéò„ÇäÈÄ≤„ÇÅ„Çâ„Çå„Çã„Åã„Å©„ÅÜ„Åã„ÅÆÂÆöÁæ©„ÅØ„ÄÅÁèæÂú®„ÅÆÂ∫ßÊ®ô„Åã„Çâ1„Éû„ÇπÂÖàÂèä„Å≥2„Éû„ÇπÂÖà„ÅÆÂ∫ßÊ®ô„Åæ„ÅßÂ£Å„Å®„Å™„Å£„Å¶„ÅÑ„Çã„Åì„Å®„Åß„ÅÇ„Çã
    Êéò„ÇäÈÄ≤„ÇÅ„Çã„Åì„Å®„ÅåÂèØËÉΩ„Å™ÊñπÂêë„Çí„É©„É≥„ÉÄ„É†„Å´ÈÅ∏Êäû„Åó„Å¶„ÄÅ2„Éû„ÇπÂÖà„Åæ„ÅßÈÅì„Å®„Åó„Å¶„ÄÅÁèæÂú®‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞„Åô„Çã
    ÁèæÂú®‰ΩçÁΩÆ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà„Å®„Åó„Å¶„É™„Çπ„Éà„Å´ËøΩÂä†„Åó„ÄÅ‰øùÂ≠ò„Åô„Çã
    Êéò„ÇäÈÄ≤„ÇÅ„Çã„Åì„Å®„Åå„Åß„Åç„Å™„Åè„Å™„Çã„Åæ„Åß1.~3.„ÇíÁπ∞„ÇäËøî„Åô
    Êéò„ÇäÈÄ≤„ÇÅ„Çã„Åì„Å®„Åå„Åß„Åç„Å™„Åè„Å™„Å£„Åü„Çâ„ÄÅ„Åì„Çå„Åæ„Åß3.„Å´Ë®òÈå≤„Åó„Å¶„ÅÑ„ÅüÂ∫ßÊ®ô„Åã„Çâ„Å©„Åì„Åã„Åó„Çâ„Åã„Å´Êéò„ÇäÈÄ≤„ÇÅ„Çã„Åì„Å®„ÅåÂèØËÉΩ„Å™Â∫ßÊ®ô„ÇíÂèñÂæó„Åó„Å¶„Åæ„Åü1.„Åã„Çâ„ÅÆ‰ΩúÊ•≠„ÇíË°å„ÅÜ
    „Å©„Åì„Å´„ÇÇÊéò„Çã„Åì„Å®„ÅåÂá∫Êù•„ÇãÂ∫ßÊ®ô„Åå„Å™„Åè„Å™„Å£„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÊôÇÁÇπ„ÅßÂá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åô„Çã



‰∏äË®ò„ÇíÂÖÉ„Å´ÂêÑË®≠Âïè„Å´ÂõûÁ≠î„Åõ„Çà

Âïè1.
Ë®òËºâ„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÇíÂÖÉ„Å´„Åó„Å¶„ÄÅËø∑Ë∑ØÁîüÊàê„ÇíË°å„ÅÜ„Éó„É≠„Ç∞„É©„É†„ÇíÂÆüË£Ö„Åõ„Çà

Âïè2.
 ÁîüÊàê„Åó„Åü„Éó„É≠„Ç∞„É©„É†„Å´„Éó„É¨„Ç§„É§„Éº„ÅÆÂÆöÁæ©„ÇíË°å„ÅÑ„ÄÅinputÈñ¢Êï∞„Åã„Çâ„ÅÆÂÖ•Âäõ„ÇíÂÖÉ„Å´Ëø∑Ë∑ØÁ©∫Èñì„Çí‰∏ä‰∏ãÂ∑¶Âè≥„Å´ÁßªÂãï„Åô„Çã„Åü„ÇÅ„ÅÆÂá¶ÁêÜ„ÇíÂÆüË£Ö„Åõ„Çà
"""
c = curses.initscr()


class Direction:
    UP = [-1, 0]
    DOWN = [1, 0]
    LEFT = [0, -1]
    RIGHT = [0, 1]

    ALL = [
        UP,
        DOWN,
        LEFT,
        RIGHT,
    ]
    MAP = {
        "KEY_UP": UP,
        "KEY_DOWN": DOWN,
        "KEY_LEFT": LEFT,
        "KEY_RIGHT": RIGHT,
    }


class Cell:

    PLAYER = "üëª"
    OPEN = "üåï"
    CLOSE = "üåë"

    def __init__(self):
        self.status = Cell.CLOSE
        self.options = [*Direction.ALL]

    def open(self):
        self.status = Cell.OPEN

    @property
    def isClose(self):
        return self.status == Cell.CLOSE


class Maze:
    def __init__(self, width=0, height=0):
        self._visited = []
        self._width = width
        self._height = height
        self._map = [[Cell() for _ in range(width)] for _ in range(height)]
        self._created = False
        self._movingPostion = None

    @property
    def playerPostion(self):
        return self._movingPostion if self._created else self._visited[-1]

    def getCell(self, x, y) -> Cell:
        if 0 <= x <= self._width - 1 and 0 <= y <= self._height - 1:
            return self._map[x][y]
        else:
            return None

    def run(self, win):
        [x, y] = self.randomPoint()
        startPoint = self._map[x][y]
        startPoint.open()
        self._visited.append([x, y])

        while True:
            c.clear()
            m.draw()
            if self._created:
                self.waitForMove(win)
            else:
                time.sleep(0.3)
                self.dig()
            c.refresh()

    def dig(self) -> int:
        [x, y] = self.playerPostion
        cell = self._map[x][y]

        while len(cell.options):
            option = choice(cell.options)
            cell.options.remove(option)
            [dx, dy] = option
            one_forward = self.getCell(x + dx, y + dy)
            two_forward = self.getCell(x + 2 * dx, y + 2 * dy)
            if (
                one_forward
                and two_forward
                and one_forward.isClose
                and two_forward.isClose
            ):
                one_forward.open()
                two_forward.open()
                self._visited.append([x + 2 * dx, y + 2 * dy])
                return
        self._visited.pop()
        if len(self._visited) == 0:
            self._created = True
            self._movingPostion = [x, y]

    def waitForMove(self, win):
        while 1:
            try:
                key = str(win.getkey())
                if key not in Direction.MAP:
                    break
                [x, y] = self.playerPostion
                [dx, dy] = Direction.MAP[key]
                cell = self.getCell(x + dx, y + dy)
                if cell and not cell.isClose:
                    self._movingPostion = [x + dx, y + dy]
                break
            except Exception:
                pass

    def randomPoint(self) -> [int, int]:
        return [randint(0, self._width - 1), randint(0, self._height - 1)]

    def draw(self):
        for x, row in enumerate(self._map):
            for y, cell in enumerate(row):
                if self.playerPostion == [x, y]:
                    c.addstr(Cell.PLAYER)
                else:
                    c.addstr(cell.status)
            c.addstr("\n")
        if self._created:
            c.addstr(
                "press arrow key to move:\n"
                + "UP:‚Üë \nDOWN: ‚Üì \nRIGHT:‚Üí \nLEFT:‚Üê\nQUIT: Ctrl+C\n"
            )


if __name__ == "__main__":
    m = Maze(5, 5)
    try:
        curses.wrapper(m.run)
    except KeyboardInterrupt:
        sys.exit(0)
